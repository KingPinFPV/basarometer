#!/bin/bash

# 🏗️ Add Israeli Retail Site Template
# Template script for adding new Israeli retail sites to Basarometer
# Usage: ./scripts/add-site-template.sh <site_name> <site_url> [site_type]

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="/Users/yogi/Desktop/basarometer/scan bot"
CONFIG_FILE="$PROJECT_ROOT/config/meat-sites.json"
BACKUP_DIR="$PROJECT_ROOT/backups"

# Parse command line arguments
SITE_NAME="$1"
SITE_URL="$2"
SITE_TYPE="${3:-standard}"

echo "🏗️ Add Israeli Retail Site Template"
echo "===================================="
echo "📅 $(date)"

# Validate arguments
if [[ -z "$SITE_NAME" || -z "$SITE_URL" ]]; then
    echo ""
    echo "❌ Usage: $0 <site_name> <site_url> [site_type]"
    echo ""
    echo "Examples:"
    echo "  $0 yohananof https://www.yohananof.co.il kosher"
    echo "  $0 mega https://www.mega.co.il large_chain"
    echo "  $0 victory https://www.victory.co.il discount"
    echo ""
    echo "Site types: kosher, standard, discount, premium, large_chain"
    exit 1
fi

echo "🎯 Target Site: $SITE_NAME"
echo "🌐 URL: $SITE_URL"  
echo "🏷️ Type: $SITE_TYPE"
echo ""

# Function to check status
check_status() {
    local description="$1"
    local command="$2"
    
    echo -n "🔍 $description... "
    
    if eval "$command" >/dev/null 2>&1; then
        echo -e "${GREEN}✅ PASS${NC}"
        return 0
    else
        echo -e "${RED}❌ FAIL${NC}"
        return 1
    fi
}

echo "📋 PRE-FLIGHT CHECKS"
echo "===================="

# Check if configuration file exists
if ! check_status "Configuration file exists" "test -f '$CONFIG_FILE'"; then
    echo "Creating new configuration file..."
    mkdir -p "$(dirname "$CONFIG_FILE")"
    echo '{}' > "$CONFIG_FILE"
    echo -e "${GREEN}✅ Configuration file created${NC}"
fi

# Check if site already exists
if grep -q "\"$SITE_NAME\"" "$CONFIG_FILE" 2>/dev/null; then
    echo -e "${YELLOW}⚠️ Warning: $SITE_NAME already exists in configuration${NC}"
    echo "Existing configuration will be updated."
    SITE_EXISTS=true
else
    echo -e "${GREEN}✅ $SITE_NAME is new - ready to add${NC}"
    SITE_EXISTS=false
fi

# Validate URL format
if [[ "$SITE_URL" =~ ^https?://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/?.*$ ]]; then
    check_status "URL format valid" "true"
else
    echo -e "${RED}❌ Invalid URL format: $SITE_URL${NC}"
    exit 1
fi

# Test URL accessibility
check_status "URL accessible" "curl -I -s --max-time 10 '$SITE_URL' | head -1 | grep -q '200'"

echo ""
echo "💾 CREATING BACKUP"
echo "=================="

# Create backup before making changes
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="$BACKUP_DIR/config_before_${SITE_NAME}_${TIMESTAMP}.json"

mkdir -p "$BACKUP_DIR"
cp "$CONFIG_FILE" "$BACKUP_FILE"
echo -e "💾 Backup created: ${BLUE}$BACKUP_FILE${NC}"

echo ""
echo "🔧 GENERATING CONFIGURATION"
echo "==========================="

# Determine confidence based on site type
case "$SITE_TYPE" in
    "kosher") CONFIDENCE=0.82 ;;
    "large_chain") CONFIDENCE=0.80 ;;
    "premium") CONFIDENCE=0.78 ;;
    "discount") CONFIDENCE=0.75 ;;
    *) CONFIDENCE=0.73 ;;
esac

# Generate Hebrew meat keywords
HEBREW_KEYWORDS='["בשר", "עוף", "כבש", "טלה", "בקר", "עגל", "חזיר", "קבב", "נקניק", "המבורגר", "שניצל", "פרגית", "כנפיים", "שוק", "חזה", "כבד"]'

# Create configuration for the new site
NEW_CONFIG=$(cat << EOF
{
  "baseUrl": "$SITE_URL",
  "selectors": {
    "productContainer": ".product-item, .miglog-product, .product-card, .product-container, .item",
    "productName": ".product-name, .miglog-prod-name, .product-title, .item-name, .title",
    "productPrice": ".price, .miglog-price, .product-price, .item-price, .current-price, .cost",
    "productImage": ".product-image img, .miglog-image img, .item-image img, img",
    "productBrand": ".brand, .miglog-brand, .product-brand, .manufacturer",
    "productCategory": ".category, .miglog-category, .breadcrumb"
  },
  "categories": [
    "$SITE_URL/categories/בשר-עוף-ודגים",
    "$SITE_URL/categories/בשר",
    "$SITE_URL/categories/עוף",
    "$SITE_URL/category/meat",
    "$SITE_URL/meat"
  ],
  "waitTime": 3000,
  "maxPages": 5,
  "hebrewMeatKeywords": $HEBREW_KEYWORDS,
  "confidence": $CONFIDENCE,
  "siteType": "$SITE_TYPE",
  "template_source": "add_site_template",
  "created_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "status": "template_generated",
  "notes": "Generated by add-site-template.sh - needs testing and optimization"
}
EOF
)

echo "📋 Configuration generated:"
echo "$NEW_CONFIG" | head -10
echo "... (full config ready)"

echo ""
echo "💾 UPDATING CONFIGURATION FILE"
echo "=============================="

# Update the configuration file using Python for safe JSON manipulation
python3 << EOF
import json
import sys

try:
    # Load existing configuration
    with open('$CONFIG_FILE', 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    # Add new site configuration
    config['$SITE_NAME'] = $NEW_CONFIG
    
    # Save updated configuration
    with open('$CONFIG_FILE', 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print("✅ Configuration updated successfully")
    sys.exit(0)
    
except Exception as e:
    print(f"❌ Error updating configuration: {e}")
    sys.exit(1)
EOF

if [[ $? -eq 0 ]]; then
    echo -e "${GREEN}✅ $SITE_NAME added to configuration${NC}"
else
    echo -e "${RED}❌ Failed to update configuration${NC}"
    echo "Restoring backup..."
    cp "$BACKUP_FILE" "$CONFIG_FILE"
    exit 1
fi

echo ""
echo "🧪 RUNNING INITIAL TEST"
echo "======================="

# Run a quick test of the new configuration
echo "🚀 Testing $SITE_NAME configuration..."
TEST_COMMAND="cd '$PROJECT_ROOT' && timeout 30s node basarometer-scanner.js --test --site $SITE_NAME --debug --quick --max-pages 1"

# Create test log
TEST_LOG="/tmp/${SITE_NAME}_initial_test_$(date +%s).log"
echo "📝 Test log: $TEST_LOG"

# Run the test
eval "$TEST_COMMAND" > "$TEST_LOG" 2>&1
TEST_EXIT_CODE=$?

# Analyze test results
if [[ $TEST_EXIT_CODE -eq 0 ]]; then
    echo -e "🎯 Initial test: ${GREEN}✅ SUCCESS${NC}"
    
    # Extract products found
    PRODUCTS_FOUND=$(grep -o "נמצאו [0-9]\+ מוצרי בשר" "$TEST_LOG" | grep -o "[0-9]\+" | tail -1)
    [[ -z "$PRODUCTS_FOUND" ]] && PRODUCTS_FOUND=0
    
    echo "📦 Products found: $PRODUCTS_FOUND"
    
    if [[ $PRODUCTS_FOUND -ge 10 ]]; then
        echo -e "${GREEN}🎉 Excellent! Configuration is working well.${NC}"
        CONFIG_STATUS="working"
    elif [[ $PRODUCTS_FOUND -ge 3 ]]; then
        echo -e "${YELLOW}🟡 Good start, but may need optimization.${NC}"
        CONFIG_STATUS="needs_optimization"
    else
        echo -e "${YELLOW}🟠 Minimal results - requires adjustment.${NC}"
        CONFIG_STATUS="needs_adjustment"
    fi
elif [[ $TEST_EXIT_CODE -eq 124 ]]; then
    echo -e "🎯 Initial test: ${YELLOW}⏰ TIMEOUT${NC}"
    echo "Site may be slow - consider increasing wait times"
    CONFIG_STATUS="timeout"
else
    echo -e "🎯 Initial test: ${RED}❌ FAILED${NC}"
    echo "Configuration needs debugging"
    CONFIG_STATUS="failed"
fi

echo ""
echo "📊 SITE ADDITION SUMMARY"
echo "========================"
echo "🏪 Site: $SITE_NAME"
echo "🌐 URL: $SITE_URL"
echo "🏷️ Type: $SITE_TYPE"
echo "🎯 Confidence: $CONFIDENCE"
echo "📁 Config file: $CONFIG_FILE"
echo "💾 Backup: $BACKUP_FILE"
echo "📝 Test log: $TEST_LOG"
echo "⚡ Status: $CONFIG_STATUS"

echo ""
echo "🛠️ NEXT STEPS"
echo "============="

case "$CONFIG_STATUS" in
    "working")
        echo -e "${GREEN}✅ Configuration is working well!${NC}"
        echo "1. Add to regular scanning schedule"
        echo "2. Monitor performance over time"
        echo "3. Fine-tune if needed"
        ;;
    "needs_optimization")
        echo -e "${YELLOW}🔧 Optimize the configuration:${NC}"
        echo "1. Adjust selectors for better accuracy"
        echo "2. Fine-tune wait times and categories"
        echo "3. Re-test with: ./scripts/test-${SITE_NAME}.sh"
        ;;
    "needs_adjustment"|"timeout"|"failed")
        echo -e "${RED}🚨 Configuration needs work:${NC}"
        echo "1. Check selectors match site structure"
        echo "2. Verify category URLs are correct"
        echo "3. Increase wait times if pages load slowly"
        echo "4. Test manually: curl -I $SITE_URL"
        echo "5. Re-test with: ./scripts/test-${SITE_NAME}.sh"
        ;;
esac

echo ""
echo "🔧 CONFIGURATION COMMANDS"
echo "========================"
echo "• Test site: ./scripts/test-${SITE_NAME}.sh"
echo "• Health check: ./scripts/mcp-health-check.sh"
echo "• Manual scan: node basarometer-scanner.js --test --site $SITE_NAME"
echo "• Edit config: nano $CONFIG_FILE"

echo ""
echo "💡 OPTIMIZATION TIPS"
echo "===================="
echo "• Hebrew sites: Ensure UTF-8 encoding in selectors"
echo "• Slow sites: Increase waitTime (3000-8000ms)"
echo "• Complex sites: Add more selector fallbacks"
echo "• Mobile sites: Consider different selectors"

echo ""
if [[ "$CONFIG_STATUS" == "working" ]]; then
    echo -e "${GREEN}🎉 $SITE_NAME successfully added and tested!${NC}"
    exit 0
else
    echo -e "${YELLOW}⚠️ $SITE_NAME added but needs optimization.${NC}"
    exit 1
fi